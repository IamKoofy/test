def handleEc2Instance(ec2Instance, ec2Action, params) {
    def instanceID = ec2Instance['instanceId']
    def instanceName = ec2Instance['instanceName']
    def instanceState = ec2Instance['instanceState']

    echo "*** Instance Name of ${instanceID} is ${instanceName} ***"
    echo "*** Instance State of ${instanceName} / ${instanceID} is ${instanceState} ***"

    // Assuming 'IS_APPROVED' is defined outside the try-catch block
    IS_APPROVED = null

    try {
        IS_APPROVED = input(
            message: "Are you OK to ${ec2Action} the instance ${instanceName} / ${instanceID}?",
            parameters: [
                [$class: 'ChoiceParameterDefinition', choices: ['YES', 'NO'], name: 'Select YES / NO']
            ]
        )
    } catch (exc) {
        wrap([$class: 'BuildUser']) {
            error("${BUILD_USER} aborted the approval input to ${ec2Action} the instance")
        }
    }

    if (IS_APPROVED == "YES") {
        echo "*** Instance ${instanceName} / ${instanceID} is going to be ${ec2Action} ***"
        def ec2Environment = params.AWS_ENVIRONMENT.toUpperCase()
        wrap([$class: 'BuildUser']) {
            echo "*** Sending Slack Notification ***"
            slackSend channel: "${SLACK_CHANNEL}", color: (ec2Action == 'stop') ? "#FF7F50" : "#9FE2BF",
                      message: "${BUILD_USER} :: ${params.APP_NAME} :: ${ec2Environment} :: EC2 Instance ${instanceName} / ${instanceID} is ${ec2Action}:: ${BUILD_TIMESTAMP}"
        }

        // Execute start or stop command
        sh "aws ec2 ${ec2Action}-instances --instance-ids ${instanceID} --region us-east-1"
    } else {
        echo "*** Instance ${instanceName} / ${instanceID} will not be ${ec2Action} as per user input ***"
    }
}
